// <auto-generated />
using System;
using Interactive_Map.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Interactive_Map.Infrastructure.Migrations
{
    [DbContext(typeof(GameMapsDbContext))]
    [Migration("20250104212029_InitialCreate2")]
    partial class InitialCreate2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("Interactive_Map.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(3000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayType")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("FeaturesEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasHeatmap")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Icon")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IgnEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IgnVisible")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Premium")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Visible")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Interactive_Map.Domain.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastSynced")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Synced")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Interactive_Map.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Expandable")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("MapId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Interactive_Map.Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<Guid>("RefrenceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Interactive_Map.Domain.Entities.Map", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GameId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("Interactive_Map.Domain.Entities.MapConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("InitialZoom")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("MapId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Overzoom")
                        .HasColumnType("INTEGER");

                    b.Property<double>("StartLat")
                        .HasColumnType("REAL");

                    b.Property<double>("StartLng")
                        .HasColumnType("REAL");

                    b.Property<string>("TileSets")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MapId")
                        .IsUnique();

                    b.ToTable("MapConfigs");
                });

            modelBuilder.Entity("Interactive_Map.Domain.Entities.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Interactive_Map.Domain.Entities.UserConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecialGameLinks")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecialMapLinks")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Config");
                });

            modelBuilder.Entity("Interactive_Map.Domain.Entities.UserLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Checked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<Guid>("LocationId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Marked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .HasMaxLength(2147483647)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("UserLocations");
                });

            modelBuilder.Entity("Interactive_Map.Domain.Entities.Category", b =>
                {
                    b.HasOne("Interactive_Map.Domain.Entities.Group", "Group")
                        .WithMany("Categories")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Interactive_Map.Domain.Entities.Group", b =>
                {
                    b.HasOne("Interactive_Map.Domain.Entities.Map", "Map")
                        .WithMany("Groups")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("Interactive_Map.Domain.Entities.Location", b =>
                {
                    b.HasOne("Interactive_Map.Domain.Entities.Category", "Category")
                        .WithMany("Locations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Interactive_Map.Domain.Entities.Map", b =>
                {
                    b.HasOne("Interactive_Map.Domain.Entities.Game", "Game")
                        .WithMany("Maps")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Interactive_Map.Domain.Entities.MapConfig", b =>
                {
                    b.HasOne("Interactive_Map.Domain.Entities.Map", "Map")
                        .WithOne("MapConfig")
                        .HasForeignKey("Interactive_Map.Domain.Entities.MapConfig", "MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("Interactive_Map.Domain.Entities.Media", b =>
                {
                    b.HasOne("Interactive_Map.Domain.Entities.Location", "Location")
                        .WithMany("Media")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Interactive_Map.Domain.Entities.UserLocation", b =>
                {
                    b.HasOne("Interactive_Map.Domain.Entities.Location", "Location")
                        .WithOne("UserLocation")
                        .HasForeignKey("Interactive_Map.Domain.Entities.UserLocation", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Interactive_Map.Domain.Entities.Category", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Interactive_Map.Domain.Entities.Game", b =>
                {
                    b.Navigation("Maps");
                });

            modelBuilder.Entity("Interactive_Map.Domain.Entities.Group", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Interactive_Map.Domain.Entities.Location", b =>
                {
                    b.Navigation("Media");

                    b.Navigation("UserLocation");
                });

            modelBuilder.Entity("Interactive_Map.Domain.Entities.Map", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("MapConfig");
                });
#pragma warning restore 612, 618
        }
    }
}
